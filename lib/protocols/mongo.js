// Generated by CoffeeScript 1.7.1
(function() {
  "use strict";
  var Mongo, Url, colors, csvString, mime, pretty, util, utils;

  util = require('util');

  Url = require('url');

  mime = require('mime');

  colors = require('colors');

  csvString = require('csv-string');

  utils = require('../utils');

  pretty = utils.pretty;

  Mongo = (function() {
    function Mongo(_fussy, _url) {
      var parsed, path, _ref, _ref1, _ref2;
      this._fussy = _fussy;
      this._url = _url;
      parsed = Url.parse(this._url);
      this._host = (_ref = parsed.hostname) != null ? _ref : '127.0.0.1';
      this._port = Number((_ref1 = parsed.port) != null ? _ref1 : '27017');
      path = (_ref2 = parsed.path) != null ? _ref2 : '/fussy/fussy';
      this._database = path[0];
      this._collection = path[1];
      this._batchSize = 1024;
    }

    Mongo.prototype.debug = function(enabled) {
      this._debugEnabled = enabled;
      return this;
    };

    Mongo.prototype._debug = function(x) {
      if (!(this._debugEnabled != null ? this._debugEnabled : this._fussy._debugEnabled)) {
        return;
      }
      return console.log("Mongo".blue + "::".grey + x);
    };

    Mongo.prototype.eachSync = function(cb) {
      var Server, cursor, db, i, item, limit, results, size, skip, _i, _len;
      this._debug('Mongo::eachSync');
      limit = this._fussy.limit();
      skip = this._fussy.skip();
      Server = require('mongo-sync').Server;
      db = new Server(this._host);
      this._debug("eachSync: gettin cursor on database and collection");
      cursor = db.db(this._database).getCollection(this._collection).find();
      if (skip != null) {
        this._debug("eachSync: skipping " + skip + " results of collection");
        cursor = cursor.skip(skip);
      }
      if (limit != null) {
        this._debug("eachSync: limiting " + limit + " results of collection");
        cursor = cursor.limit(limit);
      }
      results = cursor.toArray();
      i = 0;
      size = results.length;
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        item = results[_i];
        cb(item, false);
      }
      cb(void 0, true);
      db.close();
      return void 0;
    };

    Mongo.prototype.eachAsync = function(cb) {
      var MongoClient, collection, delay, limit, skip;
      this._debug("eachAsync(cb)");
      MongoClient = require('mongodb').MongoClient;
      collection = this._collection;
      limit = this._fussy.limit();
      skip = this._fussy.skip();
      delay = 0;
      this._debug("eachAsync: connecting to mongo (" + this._host + ":" + this._port + ")");
      MongoClient.connect("mongodb://" + this._host + ":" + this._port + "/" + _database, function(err, db) {
        var cursor, _readCursor;
        if (err) {
          throw err;
        }
        this._debug("eachAsync: gettin cursor on database and collection");
        cursor = db.collection(collection).find();
        if (skip != null) {
          this._debug("eachSync: skipping " + skip + " results of collection");
          cursor = cursor.skip(skip);
        }
        if (limit != null) {
          this._debug("eachSync: limiting " + limit + " results of collection");
          cursor = cursor.limit(limit);
        }
        cursor = cursor.batchSize(this._batchSize);
        _readCursor = (function(_this) {
          return function(cursor, i, delay, db, next) {
            return cursor.nextObject(function(err, item) {
              var fn;
              _this._debug("eachAsync:_readCursor: cursor.nextObject(function(err, item){})");
              if (err) {
                throw err;
              }
              if (item) {
                _this._debug("                          - returned an item");
                cb(item, true);
                fn = function() {
                  return next(cursor, i + 1, delay);
                };
                return setTimeout(fn, delay);
              } else {
                _this._debug("                          - returned nothing: end reached");
                cb(void 0, true);
                return db.close();
              }
            });
          };
        })(this);
        this._debug("eachAsync: calling _readCursor(cursor, 0, delay, db, next)");
        return _readCursor(cursor, 0, delay, db, _readCursor);
      });
      return void 0;
    };

    return Mongo;

  })();

  module.exports = Mongo;

}).call(this);
