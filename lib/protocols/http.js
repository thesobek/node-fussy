// Generated by CoffeeScript 1.7.1
(function() {
  "use strict";
  var Http, Url, colors, csvString, httpsync, mime, pretty, request, util, utils;

  util = require('util');

  Url = require('url');

  mime = require('mime');

  colors = require('colors');

  csvString = require('csv-string');

  request = require('request');

  httpsync = require('httpsync');

  utils = require('../utils');

  pretty = utils.pretty;

  Http = (function() {
    function Http(_fussy, _url) {
      this._fussy = _fussy;
      this._url = _url;
    }

    Http.prototype.debug = function(enabled) {
      this._debugEnabled = enabled;
      return this;
    };

    Http.prototype._debug = function(x) {
      if (!(this._debugEnabled != null ? this._debugEnabled : this._fussy._debugEnabled)) {
        return;
      }
      return console.log("Http".blue + "::".grey + x);
    };

    Http.prototype.eachSync = function(cb) {
      var body, line, lines, res, type, _i, _len;
      this._debug("eachSync: http get " + this._url);
      res = httpsync.get(this._url);
      body = res.data.toString('utf8');
      this._debug("eachSync: result: " + body);
      type = mime.lookup(path);
      switch (type) {
        case 'text/csv':
          this._debug("eachSync: downloaded file is a " + type);
          lines = body.split('\n');
          for (_i = 0, _len = lines.length; _i < _len; _i++) {
            line = lines[_i];
            cb(line, false);
          }
          cb(void 0, true);
          break;
        default:
          this._debug("eachSync: request: unrecognized file format");
          cb(void 0, true);
      }
    };

    Http.prototype.eachAsync = function(cb) {
      var parsed, path, url;
      this._debug("eachAsync: calling request");
      url = this._url;
      parsed = Url.parse(url);
      path = parsed.path;
      request(this._url, (function(_this) {
        return function(error, response, body) {
          var line, lines, type, _i, _len;
          if (!error && response.statusCode === 200) {
            _this._debug("eachAsync: request: succeeded");
            type = mime.lookup(path);
            switch (type) {
              case 'text/csv':
                _this._debug("eachAsync: request: downloaded content is a " + type);
                lines = body.split('\n');
                for (_i = 0, _len = lines.length; _i < _len; _i++) {
                  line = lines[_i];
                  cb(line, false);
                }
                return cb(void 0, true);
              default:
                _this._debug("eachAsync: request: unrecognized file format");
                return cb(void 0, true);
            }
          } else {
            _this._debug("eachAsync: request: failed: " + error);
            return cb(void 0, true);
          }
        };
      })(this));
    };

    return Http;

  })();

  module.exports = Http;

}).call(this);
