// Generated by CoffeeScript 1.7.1
(function() {
  "use strict";
  var Glob, Url, colors, csvString, fs, glob, mime, path, pretty, readline, stream, util, utils;

  path = require('path');

  util = require('util');

  Url = require('url');

  fs = require('fs');

  glob = require('glob');

  stream = require('stream');

  readline = require('readline');

  mime = require('mime');

  colors = require('colors');

  csvString = require('csv-string');

  utils = require('../utils');

  pretty = utils.pretty;

  Glob = (function() {
    function Glob(_fussy, _url) {
      var parsed;
      this._fussy = _fussy;
      this._url = _url;
      parsed = Url.parse(this._url);
      this._path = parsed.path;
      if (parsed.protocol == null) {
        this._path = this._url;
      }
    }

    Glob.prototype.debug = function(enabled) {
      this._debugEnabled = enabled;
      return this;
    };

    Glob.prototype._debug = function(x) {
      if (!(this._debugEnabled != null ? this._debugEnabled : this._fussy._debugEnabled)) {
        return;
      }
      return console.log("Glob".blue + "::".grey + x);
    };

    Glob.prototype.eachSync = function(cb) {
      var exc, file, files, i, jsonFile, jsonFiles, limit, m, obj, skip, type, _i, _j, _len, _len1, _ref, _ref1;
      this._debug("eachSync(cb)");
      files = glob.sync(this._path);
      skip = (_ref = this._fussy._skip) != null ? _ref : 0;
      limit = (_ref1 = this._fussy._limit) != null ? _ref1 : Infinity;
      jsonFiles = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        type = mime.lookup(file);
        if (type === 'application/json') {
          jsonFiles.push(type);
        } else {
          this._debug("eachSync: files of type " + type + " are not supported in synchronous mode");
        }
      }
      i = 0;
      jsonFiles = jsonFiles.slice(skip, skip + limit);
      m = jsonFiles.length;
      for (_j = 0, _len1 = jsonFiles.length; _j < _len1; _j++) {
        jsonFile = jsonFiles[_j];
        obj = void 0;
        try {
          obj = JSON.parse(fs.readFileSync(file, 'utf8'));
        } catch (_error) {
          exc = _error;
          this._debug("eachSync: couldn't read json file " + file + ": " + exc);
          continue;
        }
        if (obj != null) {
          cb(obj, false);
        }
      }
      return cb(void 0, true);
    };

    Glob.prototype.eachAsync = function(cb) {
      var limit, skip, _ref, _ref1;
      this._debug("eachAsync(cb)");
      skip = (_ref = this._fussy._skip) != null ? _ref : 0;
      limit = (_ref1 = this._fussy._limit) != null ? _ref1 : Infinity;
      return glob.sync(this._path, (function(_this) {
        return function(err, files) {
          var file, i, isLast, jsonFile, jsonFiles, m, type, _i, _j, _len, _len1, _results;
          jsonFiles = [];
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            type = mime.lookup(file);
            if (type === 'application/json') {
              jsonFiles.push(type);
            } else {
              _this._debug("eachAsync: files of type " + type + " are not supported in synchronous mode");
            }
          }
          i = 0;
          jsonFiles = jsonFiles.slice(skip, skip + limit);
          m = jsonFiles.length;
          _results = [];
          for (_j = 0, _len1 = jsonFiles.length; _j < _len1; _j++) {
            jsonFile = jsonFiles[_j];
            i++;
            isLast = i === m;
            _results.push((function(jsonFile, isLast) {
              return fs.readFile(schema, 'utf8', function(err, data) {
                var exc, obj;
                if (err) {
                  _this._debug("eachAsync: coudln't read JSON file: " + err);
                  return cb(void 0, isLast);
                } else {
                  obj = void 0;
                  try {
                    obj = JSON.parse(data);
                  } catch (_error) {
                    exc = _error;
                    _this._debug("eachAsync: couldn't read JSON file " + jsonFile + ": " + exc);
                    cb(void 0, isLast);
                    return;
                  }
                  return cb(obj, isLast);
                }
              });
            })(jsonFile, isLast));
          }
          return _results;
        };
      })(this));
    };

    return Glob;

  })();

  module.exports = Glob;

}).call(this);
